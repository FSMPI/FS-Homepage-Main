# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Vertreter {
  id: ID!
  nutzer_email: User
  rolle: String
  grad: String
  feld: String
  hauptfach: String
  zweitfach: String
  Lehramt: String
  semester: Int
  portrait: ImageFieldOutput
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input VertreterWhereUniqueInput {
  id: ID
}

input VertreterWhereInput {
  AND: [VertreterWhereInput!]
  OR: [VertreterWhereInput!]
  NOT: [VertreterWhereInput!]
  id: IDFilter
  nutzer_email: UserWhereInput
  rolle: StringFilter
  grad: StringFilter
  feld: StringFilter
  hauptfach: StringFilter
  zweitfach: StringNullableFilter
  Lehramt: StringNullableFilter
  semester: IntFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input VertreterOrderByInput {
  id: OrderDirection
  rolle: OrderDirection
  grad: OrderDirection
  feld: OrderDirection
  hauptfach: OrderDirection
  zweitfach: OrderDirection
  Lehramt: OrderDirection
  semester: OrderDirection
}

input VertreterUpdateInput {
  nutzer_email: UserRelateToOneForUpdateInput
  rolle: String
  grad: String
  feld: String
  hauptfach: String
  zweitfach: String
  Lehramt: String
  semester: Int
  portrait: ImageFieldInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input VertreterUpdateArgs {
  where: VertreterWhereUniqueInput!
  data: VertreterUpdateInput!
}

input VertreterCreateInput {
  nutzer_email: UserRelateToOneForCreateInput
  rolle: String
  grad: String
  feld: String
  hauptfach: String
  zweitfach: String
  Lehramt: String
  semester: Int
  portrait: ImageFieldInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type feriensprechstunden {
  id: ID!
  tag: DateTime
  person(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  personCount(where: UserWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input feriensprechstundenWhereUniqueInput {
  id: ID
  tag: DateTime
}

input feriensprechstundenWhereInput {
  AND: [feriensprechstundenWhereInput!]
  OR: [feriensprechstundenWhereInput!]
  NOT: [feriensprechstundenWhereInput!]
  id: IDFilter
  tag: DateTimeFilter
  person: UserManyRelationFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input feriensprechstundenOrderByInput {
  id: OrderDirection
  tag: OrderDirection
}

input feriensprechstundenUpdateInput {
  tag: DateTime
  person: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input feriensprechstundenUpdateArgs {
  where: feriensprechstundenWhereUniqueInput!
  data: feriensprechstundenUpdateInput!
}

input feriensprechstundenCreateInput {
  tag: DateTime
  person: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Post {
  id: ID!
  content: Post_content_Document
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
}

input PostOrderByInput {
  id: OrderDirection
}

input PostUpdateInput {
  content: JSON
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  content: JSON
}

type Film {
  id: ID!
  titel: String
  datum: DateTime
  beschreibung: String
  orte(
    where: FilmortWhereInput! = {}
    orderBy: [FilmortOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Filmort!]
  orteCount(where: FilmortWhereInput! = {}): Int
  jahr: Int
  dauer: Int
  genres(
    where: GenreWhereInput! = {}
    orderBy: [GenreOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Genre!]
  genresCount(where: GenreWhereInput! = {}): Int
  bild: ImageFieldOutput
}

input FilmWhereUniqueInput {
  id: ID
  titel: String
  datum: DateTime
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input FilmWhereInput {
  AND: [FilmWhereInput!]
  OR: [FilmWhereInput!]
  NOT: [FilmWhereInput!]
  id: IDFilter
  titel: StringFilter
  datum: DateTimeFilter
  beschreibung: StringFilter
  orte: FilmortManyRelationFilter
  jahr: IntFilter
  dauer: IntFilter
  genres: GenreManyRelationFilter
}

input FilmortManyRelationFilter {
  every: FilmortWhereInput
  some: FilmortWhereInput
  none: FilmortWhereInput
}

input GenreManyRelationFilter {
  every: GenreWhereInput
  some: GenreWhereInput
  none: GenreWhereInput
}

input FilmOrderByInput {
  id: OrderDirection
  titel: OrderDirection
  datum: OrderDirection
  beschreibung: OrderDirection
  jahr: OrderDirection
  dauer: OrderDirection
}

input FilmUpdateInput {
  titel: String
  datum: DateTime
  beschreibung: String
  orte: FilmortRelateToManyForUpdateInput
  jahr: Int
  dauer: Int
  genres: GenreRelateToManyForUpdateInput
  bild: ImageFieldInput
}

input FilmortRelateToManyForUpdateInput {
  disconnect: [FilmortWhereUniqueInput!]
  set: [FilmortWhereUniqueInput!]
  create: [FilmortCreateInput!]
  connect: [FilmortWhereUniqueInput!]
}

input GenreRelateToManyForUpdateInput {
  disconnect: [GenreWhereUniqueInput!]
  set: [GenreWhereUniqueInput!]
  create: [GenreCreateInput!]
  connect: [GenreWhereUniqueInput!]
}

input FilmUpdateArgs {
  where: FilmWhereUniqueInput!
  data: FilmUpdateInput!
}

input FilmCreateInput {
  titel: String
  datum: DateTime
  beschreibung: String
  orte: FilmortRelateToManyForCreateInput
  jahr: Int
  dauer: Int
  genres: GenreRelateToManyForCreateInput
  bild: ImageFieldInput
}

input FilmortRelateToManyForCreateInput {
  create: [FilmortCreateInput!]
  connect: [FilmortWhereUniqueInput!]
}

input GenreRelateToManyForCreateInput {
  create: [GenreCreateInput!]
  connect: [GenreWhereUniqueInput!]
}

type Filmort {
  id: ID!
  ort: String
}

input FilmortWhereUniqueInput {
  id: ID
  ort: String
}

input FilmortWhereInput {
  AND: [FilmortWhereInput!]
  OR: [FilmortWhereInput!]
  NOT: [FilmortWhereInput!]
  id: IDFilter
  ort: StringFilter
}

input FilmortOrderByInput {
  id: OrderDirection
  ort: OrderDirection
}

input FilmortUpdateInput {
  ort: String
}

input FilmortUpdateArgs {
  where: FilmortWhereUniqueInput!
  data: FilmortUpdateInput!
}

input FilmortCreateInput {
  ort: String
}

type Genre {
  id: ID!
  genre: String
}

input GenreWhereUniqueInput {
  id: ID
  genre: String
}

input GenreWhereInput {
  AND: [GenreWhereInput!]
  OR: [GenreWhereInput!]
  NOT: [GenreWhereInput!]
  id: IDFilter
  genre: StringFilter
}

input GenreOrderByInput {
  id: OrderDirection
  genre: OrderDirection
}

input GenreUpdateInput {
  genre: String
}

input GenreUpdateArgs {
  where: GenreWhereUniqueInput!
  data: GenreUpdateInput!
}

input GenreCreateInput {
  genre: String
}

type Sprachen {
  id: ID!
  sprach_code: String
}

input SprachenWhereUniqueInput {
  id: ID
  sprach_code: String
}

input SprachenWhereInput {
  AND: [SprachenWhereInput!]
  OR: [SprachenWhereInput!]
  NOT: [SprachenWhereInput!]
  id: IDFilter
  sprach_code: StringFilter
}

input SprachenOrderByInput {
  id: OrderDirection
  sprach_code: OrderDirection
}

input SprachenUpdateInput {
  sprach_code: String
}

input SprachenUpdateArgs {
  where: SprachenWhereUniqueInput!
  data: SprachenUpdateInput!
}

input SprachenCreateInput {
  sprach_code: String
}

type GenreUebersetzung {
  id: ID!
  genre: Genre
  sprache: Sprachen
  uebersetzung: String
}

input GenreUebersetzungWhereUniqueInput {
  id: ID
}

input GenreUebersetzungWhereInput {
  AND: [GenreUebersetzungWhereInput!]
  OR: [GenreUebersetzungWhereInput!]
  NOT: [GenreUebersetzungWhereInput!]
  id: IDFilter
  genre: GenreWhereInput
  sprache: SprachenWhereInput
  uebersetzung: StringFilter
}

input GenreUebersetzungOrderByInput {
  id: OrderDirection
  uebersetzung: OrderDirection
}

input GenreUebersetzungUpdateInput {
  genre: GenreRelateToOneForUpdateInput
  sprache: SprachenRelateToOneForUpdateInput
  uebersetzung: String
}

input GenreRelateToOneForUpdateInput {
  create: GenreCreateInput
  connect: GenreWhereUniqueInput
  disconnect: Boolean
}

input SprachenRelateToOneForUpdateInput {
  create: SprachenCreateInput
  connect: SprachenWhereUniqueInput
  disconnect: Boolean
}

input GenreUebersetzungUpdateArgs {
  where: GenreUebersetzungWhereUniqueInput!
  data: GenreUebersetzungUpdateInput!
}

input GenreUebersetzungCreateInput {
  genre: GenreRelateToOneForCreateInput
  sprache: SprachenRelateToOneForCreateInput
  uebersetzung: String
}

input GenreRelateToOneForCreateInput {
  create: GenreCreateInput
  connect: GenreWhereUniqueInput
}

input SprachenRelateToOneForCreateInput {
  create: SprachenCreateInput
  connect: SprachenWhereUniqueInput
}

type tester {
  id: ID!
  test: Int
}

input testerWhereUniqueInput {
  id: ID
}

input testerWhereInput {
  AND: [testerWhereInput!]
  OR: [testerWhereInput!]
  NOT: [testerWhereInput!]
  id: IDFilter
  test: IntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input testerOrderByInput {
  id: OrderDirection
  test: OrderDirection
}

input testerUpdateInput {
  test: Int
}

input testerUpdateArgs {
  where: testerWhereUniqueInput!
  data: testerUpdateInput!
}

input testerCreateInput {
  test: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createVertreter(data: VertreterCreateInput!): Vertreter
  createVertreters(data: [VertreterCreateInput!]!): [Vertreter]
  updateVertreter(
    where: VertreterWhereUniqueInput!
    data: VertreterUpdateInput!
  ): Vertreter
  updateVertreters(data: [VertreterUpdateArgs!]!): [Vertreter]
  deleteVertreter(where: VertreterWhereUniqueInput!): Vertreter
  deleteVertreters(where: [VertreterWhereUniqueInput!]!): [Vertreter]
  createferiensprechstunden(
    data: feriensprechstundenCreateInput!
  ): feriensprechstunden
  createFeriensprechstundens(
    data: [feriensprechstundenCreateInput!]!
  ): [feriensprechstunden]
  updateferiensprechstunden(
    where: feriensprechstundenWhereUniqueInput!
    data: feriensprechstundenUpdateInput!
  ): feriensprechstunden
  updateFeriensprechstundens(
    data: [feriensprechstundenUpdateArgs!]!
  ): [feriensprechstunden]
  deleteferiensprechstunden(
    where: feriensprechstundenWhereUniqueInput!
  ): feriensprechstunden
  deleteFeriensprechstundens(
    where: [feriensprechstundenWhereUniqueInput!]!
  ): [feriensprechstunden]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createFilm(data: FilmCreateInput!): Film
  createFilms(data: [FilmCreateInput!]!): [Film]
  updateFilm(where: FilmWhereUniqueInput!, data: FilmUpdateInput!): Film
  updateFilms(data: [FilmUpdateArgs!]!): [Film]
  deleteFilm(where: FilmWhereUniqueInput!): Film
  deleteFilms(where: [FilmWhereUniqueInput!]!): [Film]
  createFilmort(data: FilmortCreateInput!): Filmort
  createFilmorts(data: [FilmortCreateInput!]!): [Filmort]
  updateFilmort(
    where: FilmortWhereUniqueInput!
    data: FilmortUpdateInput!
  ): Filmort
  updateFilmorts(data: [FilmortUpdateArgs!]!): [Filmort]
  deleteFilmort(where: FilmortWhereUniqueInput!): Filmort
  deleteFilmorts(where: [FilmortWhereUniqueInput!]!): [Filmort]
  createGenre(data: GenreCreateInput!): Genre
  createGenres(data: [GenreCreateInput!]!): [Genre]
  updateGenre(where: GenreWhereUniqueInput!, data: GenreUpdateInput!): Genre
  updateGenres(data: [GenreUpdateArgs!]!): [Genre]
  deleteGenre(where: GenreWhereUniqueInput!): Genre
  deleteGenres(where: [GenreWhereUniqueInput!]!): [Genre]
  createSprachen(data: SprachenCreateInput!): Sprachen
  createSprachens(data: [SprachenCreateInput!]!): [Sprachen]
  updateSprachen(
    where: SprachenWhereUniqueInput!
    data: SprachenUpdateInput!
  ): Sprachen
  updateSprachens(data: [SprachenUpdateArgs!]!): [Sprachen]
  deleteSprachen(where: SprachenWhereUniqueInput!): Sprachen
  deleteSprachens(where: [SprachenWhereUniqueInput!]!): [Sprachen]
  createGenreUebersetzung(
    data: GenreUebersetzungCreateInput!
  ): GenreUebersetzung
  createGenreUebersetzungs(
    data: [GenreUebersetzungCreateInput!]!
  ): [GenreUebersetzung]
  updateGenreUebersetzung(
    where: GenreUebersetzungWhereUniqueInput!
    data: GenreUebersetzungUpdateInput!
  ): GenreUebersetzung
  updateGenreUebersetzungs(
    data: [GenreUebersetzungUpdateArgs!]!
  ): [GenreUebersetzung]
  deleteGenreUebersetzung(
    where: GenreUebersetzungWhereUniqueInput!
  ): GenreUebersetzung
  deleteGenreUebersetzungs(
    where: [GenreUebersetzungWhereUniqueInput!]!
  ): [GenreUebersetzung]
  createtester(data: testerCreateInput!): tester
  createTesters(data: [testerCreateInput!]!): [tester]
  updatetester(where: testerWhereUniqueInput!, data: testerUpdateInput!): tester
  updateTesters(data: [testerUpdateArgs!]!): [tester]
  deletetester(where: testerWhereUniqueInput!): tester
  deleteTesters(where: [testerWhereUniqueInput!]!): [tester]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  vertreters(
    where: VertreterWhereInput! = {}
    orderBy: [VertreterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vertreter!]
  vertreter(where: VertreterWhereUniqueInput!): Vertreter
  vertretersCount(where: VertreterWhereInput! = {}): Int
  feriensprechstundens(
    where: feriensprechstundenWhereInput! = {}
    orderBy: [feriensprechstundenOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [feriensprechstunden!]
  feriensprechstunden(
    where: feriensprechstundenWhereUniqueInput!
  ): feriensprechstunden
  feriensprechstundensCount(where: feriensprechstundenWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  films(
    where: FilmWhereInput! = {}
    orderBy: [FilmOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Film!]
  film(where: FilmWhereUniqueInput!): Film
  filmsCount(where: FilmWhereInput! = {}): Int
  filmorts(
    where: FilmortWhereInput! = {}
    orderBy: [FilmortOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Filmort!]
  filmort(where: FilmortWhereUniqueInput!): Filmort
  filmortsCount(where: FilmortWhereInput! = {}): Int
  genres(
    where: GenreWhereInput! = {}
    orderBy: [GenreOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Genre!]
  genre(where: GenreWhereUniqueInput!): Genre
  genresCount(where: GenreWhereInput! = {}): Int
  sprachens(
    where: SprachenWhereInput! = {}
    orderBy: [SprachenOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Sprachen!]
  sprachen(where: SprachenWhereUniqueInput!): Sprachen
  sprachensCount(where: SprachenWhereInput! = {}): Int
  genreUebersetzungs(
    where: GenreUebersetzungWhereInput! = {}
    orderBy: [GenreUebersetzungOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [GenreUebersetzung!]
  genreUebersetzung(
    where: GenreUebersetzungWhereUniqueInput!
  ): GenreUebersetzung
  genreUebersetzungsCount(where: GenreUebersetzungWhereInput! = {}): Int
  testers(
    where: testerWhereInput! = {}
    orderBy: [testerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [tester!]
  tester(where: testerWhereUniqueInput!): tester
  testersCount(where: testerWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
